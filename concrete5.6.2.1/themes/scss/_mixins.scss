@mixin clearfix {
  zoom:1;
  &:before, &:after {
    content: "\0020"; 
    display: block; 
    height: 0; 
    overflow: hidden; 
  }
  &:after {
    clear: both;
  }
}

.clearfix, .group{
  @include clearfix;
}

// @private Default font-size for all browsers
$browser-default-font-size: 16px;

// Base font size in pixels, if not already defined.
// Should be the same as the font-size of the html element.
$base-font-size: 16px !default;

// Whether to output fallback values in px when outputting rems.
$rem-with-px-fallback: true !default;

// Convert any CSS <length> or <percentage> value to any other.
@function convert-length($length, $to-unit, $from-context: $base-font-size, $to-context: $from-context) {
        $from-unit: unit($length);

        // Optimize for cases where from and to may accidentally be the same.
        @if $from-unit == $to-unit { @return $length; }
        @if unit($from-context) != 'px' { @warn "Paremeter $from-context must resolve to a value in pixel units."; }
        @if unit($to-context) != 'px' { @warn "Parameter $to-context must resolve to a value in pixel units."; }

        // Fixed ratios
        // https://developer.mozilla.org/en/CSS/length
        // http://dev.w3.org/csswg/css3-values/#absolute-lengths
        $px-per-in: 96px / 1in;
        $px-per-mm: 96px / 25.4mm;
        $px-per-cm: 96px / 2.54cm;
        $px-per-pt: 4px / 3pt;
        $px-per-pc: 16px / 1pc;

        // Variables to store actual convesion ratios
        $px-per-from-unit: 1;
        $px-per-to-unit: 1;

        @if $from-unit != 'px' {
                @if      $from-unit == 'em'  { $px-per-from-unit: $from-context / 1em }
                @else if $from-unit == 'rem' { $px-per-from-unit: $base-font-size / 1rem }
                @else if $from-unit == '%'   { $px-per-from-unit: $from-context / 100% }
                @else if $from-unit == 'ex'  { $px-per-from-unit: $from-context / 2ex }
                @else if $from-unit == 'in'  { $px-per-from-unit: $px-per-in }
                @else if $from-unit == 'mm'  { $px-per-from-unit: $px-per-mm }
                @else if $from-unit == 'cm'  { $px-per-from-unit: $px-per-cm }
                @else if $from-unit == 'pt'  { $px-per-from-unit: $px-per-pt }
                @else if $from-unit == 'pc'  { $px-per-from-unit: $px-per-pc }
                @else if $to-unit == 'ch' or $to-unit == 'vw' or $to-unit == 'vh' or $to-unit == 'vmin' {
                        @warn "#{$from-unit} units can't be reliably converted; Returning original value.";
                        @return $length;
                }
                @else {
                        @warn "#{$from-unit} is an unknown length unit. Returning original value.";
                        @return $length;
                }
        }

        @if $to-unit != 'px' {
                @if      $to-unit == 'em'  { $px-per-to-unit: $to-context / 1em }
                @else if $to-unit == 'rem' { $px-per-to-unit: $base-font-size / 1rem }
                @else if $to-unit == '%'   { $px-per-to-unit: $to-context / 100% }
                @else if $to-unit == 'ex'  { $px-per-to-unit: $to-context / 2ex }
                @else if $to-unit == 'in'  { $px-per-to-unit: $px-per-in }
                @else if $to-unit == 'mm'  { $px-per-to-unit: $px-per-mm }
                @else if $to-unit == 'cm'  { $px-per-to-unit: $px-per-cm }
                @else if $to-unit == 'pt'  { $px-per-to-unit: $px-per-pt }
                @else if $to-unit == 'pc'  { $px-per-to-unit: $px-per-px }
                @else if $to-unit == 'ch' or $to-unit == 'vw' or $to-unit == 'vh' or $to-unit == 'vmin' {
                        @warn "#{$to-unit} units can't be reliably converted; Returning original value.";
                        @return $length;
                }
                @else {
                        @warn "#{$to-unit} is an unknown length unit. Returning original value.";
                        @return $length;
                }
        }
        @return $length * $px-per-from-unit / $px-per-to-unit;
}

// For the given property, use rem units with px as a fallback value for older
// browsers.
//
// $property - The css property name.
// $values - The value (or space-separated list of values) for the property.
// $use-px-fallback - Boolean, default: true; whether to use pixel fallback values
//
@mixin rem($property, $values, $use-px-fallback: $rem-with-px-fallback) {
        // Create a couple of empty lists as output buffers.
        $px-values: ();
        $rem-values: ();

        // Ensure $values is a list.
        @if type-of($values) != 'list' {
                $values: join((), $values);
        }

        // Loop through the $values list
        @each $value in $values {
                // For each property value, if it's in rem or px, derive both rem and
                // px values for it and add those to the end of the appropriate buffer.
                // Ensure all pixel values are rounded to the nearest pixel.
                @if type-of($value) == number and not unitless($value) and (unit($value) == px or unit($value) == rem) {
                        @if unit($value) == px {
                                $px-values: join($px-values, round($value));
                                $rem-values: join($rem-values, convert-length($value, rem));
                        }
                        @else {
                                $px-values: join($px-values, round(convert-length($value, px)));
                                $rem-values: join($rem-values, $value);
                        }
                }
                @else {
                        $px-values: join($px-values, $value);
                        $rem-values: join($rem-values, $value);
                }
        }

        // Use pixel fallback for browsers that don't understand rem units.
        @if $use-px-fallback {
                #{$property}: $px-values;
        }

        // Use rem values for everyone else (overrides pixel values).
        #{$property}: $rem-values;
}



    

// Variables

// Default font size
// Because this is so important in many of your calculations as a context,
// keep your default font size stored as a variable.

$default-font-size: 16px !default;

// Breakpoints

// Set your desired breakpoints here. Ideally, breakpoints should be set to 
// where they make sense in the design, not targeted to specific devices.

// Example:



// Contexts

// Not necessarily the same as breakpoints, but a point from which to judge
// relative values.  Put common ones here, such as the maximum width of
// the content.

// Example:
// $context-small: 420px;



// Mixins

// responsive: to use, include the following code in your
// declarations:
//
// .class {
//     some-property: some-value;
// 
//     @include responsive($breakpoint) { some-property: some-new-value; }
// }
// 
// By default, the declared media value is "all", but this can
// be overridden by calling the mixin as:
// @include responsive($breakpoint, screen)
// (using "screen" as an example)
// 
// You can define common breakpoints in the variables section above
// and reuse them.  Else, you can pass it literally when calling the
// mixin:
// 
// .class {
//     @include responsive('min-width: 640px') { some-property: some-new-value; }
// }

@mixin responsive($breakpoint, $media: all) {
        @media only #{$media} and ($breakpoint) {
                @content;
        }
}


// breakpoint: Chris Coyier's method for creating media queries.
// See: http://css-tricks.com/media-queries-sass-3-2-and-codekit/
// Make up **meaningful** names for your breakpoints so that you
// and the members of your team can understand and remember them.
// Also, adjust this mixin for as many breakpoints as you need.
// You'll likely need finer control for things like font size
// adjustments, so the "responsive" mixin above can help fill in
// the gaps.
// 
// This is currently set up as mobile first, expanding upwards.
// You'll need to change "min-width" to "max-width" if you're
// working from the desktop down.

@mixin breakpoint($breakpoint, $media: all) {

        // Change these values as required
        $medium: 550px / 16px * 1em;
        $large: 700px / 16px * 1em;
        $xlarge: 1280px / 16px * 1em;

        @if $breakpoint == medium {
                @media only #{$media} and (min-width: $medium) {
                        @content;
                }
        } @else if $breakpoint == large {
                @media only #{$media} and (min-width: $large) {
                        @content;
                }
        } @else if $breakpoint == xlarge {
                @media only #{$media} and (min-width: $xlarge) {
                        @content;
                }
        }
}


// bp: alias for breakpoint

@mixin bp($breakpoint, $media: all) {
        @include breakpoint($breakpoint, $media) {
                @content;
        }
}


// hidpi: same concept as "responsive", except that this is focusing on
// HiDPI (a.k.a. retina) displays.
@mixin hidpi($media: all) {
        @media 
                only #{$media} and (min--moz-device-pixel-ratio: 1.5),
                only #{$media} and (-o-min-device-pixel-ratio: 3/2),
                only #{$media} and (-webkit-min-device-pixel-ratio: 1.5),
                only #{$media} and (min-device-pixel-ratio: 1.5),
                only #{$media} and (min-resolution: 144dpi),
                only #{$media} and (min-resolution: 1.5dppx) {

                @content;
        }
}


// and just because the term "retina" is so widely used, we'll create
// a mixin that uses that as an alias
@mixin retina($media: all) {
        @include hidpi($media) { @content; }
}


// rem: Calculate the rem unit, and return both pixels and rems
// to support older (non-rem supporting) browsers
@mixin rem($property, $value, $context: $default-font-size) {
        #{$property}: $value;
        #{$property}: cr($value, $context);
}

// Since the most common application of this is likely to be 
// with font-size, I've created a special mixin just for that
// which will save you a whopping **5 characters** per time you
// have to type it. Productivity FTW!
@mixin font-size($font-size) {
        @include rem(font-size, $font-size);
}


// Functions

// calc-rem: calculate the rem value based on the desired pixel 
// value versus a context value, usually the default font size
$default-font-size: 16px !default;

@function calc-rem( $target, $context: $default-font-size ) {
        @return $target / $context * 1rem;
}

// Shorthand redeclaration of the above
@function cr( $target, $context: $default-font-size ) {
        @return calc-rem( $target, $context );
}


// calc-percent: calculate the percent using the target ÷ context
// formula, expressed as a percentage.  See Chapter 2 of "Responsive 
// Web Design" (Marcotte, A Book Apart, 2011)
@function calc-percent( $target, $context ) {
        @return $target / $context * 100%;
}

// Shorthand redeclaration of the above
@function cp( $target, $context ) {
        @return calc-percent( $target, $context );
}


// calc-em: sometimes, you really need to use ems, not rems,
// esp. when you're dealing with fonts that should be sized
// relative to other items in a component, such as headers.
// Remember to define your context!  Your context will be
// the font-size of the parent element.

@function calc-em( $target, $context ) {
        @return $target / $context * 1em;
}

// Shorthand redeclaration of the above

@function ce( $target, $context ) {
        @return calc-em( $target, $context );
}


// hidpi-sprite-adjustment
// when using Sass & Compass to generate sprites, there are issues with calculating the
// position of the HiDPI sprites. See http://blog.teamtreehouse.com/?p=20925 (I'll update
// this documentation when I get a chance to later.)  this function makes the necessary
// adjustment for you.
@function hidpi-sprite-adjustment($sprite-map, $sprite) {
        @return round(nth(sprite-position($sprite-map, $sprite), 2) / 2);
}

// retina-sprite-adjustment
// prefer the term "retina" over "hidpi"? here you go, this aliases the previous function
@function retina-sprite-adjustment($sprite-map, $sprite) {
        @return hidpi-sprite-adjustment($sprite-map, $sprite);
}
